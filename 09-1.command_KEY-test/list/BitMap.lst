C51 COMPILER V9.52.0.0   BITMAP                                                            09/27/2021 19:49:08 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BITMAP
OBJECT MODULE PLACED IN .\obj\BitMap.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE user\BitMap.c BROWSE INCDIR(.\user) DEBUG OBJECTEXTEND PRINT(.\list\Bit
                    -Map.lst) TABS(2) OBJECT(.\obj\BitMap.obj)

line level    source

   1          #include "BitMap.h"
   2          
   3          static unsigned char code Heart0[] = {0x00,0x36,0x49,0x41,0x22,0x14,0x08,0x00};//空心
   4          static unsigned char code Heart1[] = {0x00,0x36,0x7f,0x7f,0x3e,0x1c,0x08,0x00};//实心
   5          static unsigned char code NUM0[] = {0x0e,0x11,0x13,0x15,0x19,0x11,0x0e,0x00};
   6          static unsigned char code NUM1[] = {0x04,0x0c,0x04,0x04,0x04,0x04,0x1f,0x00};
   7          static unsigned char code NUM2[] = {0x0e,0x11,0x01,0x06,0x08,0x10,0x1f,0x00};
   8          static unsigned char code NUM3[] = {0x0e,0x11,0x01,0x06,0x01,0x11,0x0e,0x00};
   9          static unsigned char code NUM4[] = {0x03,0x05,0x09,0x11,0x1f,0x01,0x01,0x00};
  10          static unsigned char code NUM5[] = {0x1f,0x10,0x1e,0x01,0x01,0x11,0x0e,0x00};
  11          static unsigned char code NUM6[] = {0x0e,0x11,0x10,0x1e,0x11,0x11,0x0e,0x00};
  12          static unsigned char code NUM7[] = {0x1f,0x11,0x01,0x02,0x04,0x04,0x04,0x00};
  13          static unsigned char code NUM8[] = {0x0e,0x11,0x11,0x0e,0x11,0x11,0x0e,0x00};
  14          static unsigned char code NUM9[] = {0x0e,0x11,0x11,0x0f,0x01,0x02,0x0c,0x00};
  15          volatile unsigned int BitMapTab[8] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
  16          
  17          
  18          void BitMap_Display()   
  19          {
  20   1        static unsigned char accept_count = 0;
  21   1        BitMap1 = 0;BitMap2 = 0;BitMap3 = 0;BitMap4 = 0;BitMap5 = 0;BitMap6 = 0;BitMap7 = 0;BitMap8 = 0;
  22   1        accept_count++;
  23   1        if(accept_count > 8)
  24   1        {
  25   2          accept_count = 1;
  26   2        }
  27   1        P2 = BitMapTab[accept_count - 1];
  28   1        switch(accept_count)
  29   1        {
  30   2          case 1:BitMap1 = 1;break;
  31   2          case 2:BitMap2 = 1;break;
  32   2          case 3:BitMap3 = 1;break;
  33   2          case 4:BitMap4 = 1;break;
  34   2          case 5:BitMap5 = 1;break;
  35   2          case 6:BitMap6 = 1;break;
  36   2          case 7:BitMap7 = 1;break;
  37   2          case 8:BitMap8 = 1;break;
  38   2          default:break;
  39   2        }
  40   1      }
  41          void BitMap()
  42          {
  43   1        unsigned int i ;
  44   1        unsigned int trigger_BM = 0;
  45   1        if(trigger_BM >= 10)
  46   1        {
  47   2          trigger_BM = 0;
  48   2        }
  49   1        if(trigger_KEY1)
  50   1        {
  51   2          trigger_BM++;
  52   2          trigger_KEY1 = 0;
  53   2        }
  54   1        switch(trigger_BM)
C51 COMPILER V9.52.0.0   BITMAP                                                            09/27/2021 19:49:08 PAGE 2   

  55   1        {
  56   2            //BieMap Show Number-0
  57   2          case 0:
  58   2          for(i=0;i<8;i++)                  
  59   2          {
  60   3          BitMapTab[i] = ~NUM0[i] ;
  61   3          }
  62   2          break;
  63   2            //BieMap Show Number-1
  64   2          case 1:
  65   2          for(i=0;i<8;i++)                  
  66   2          {
  67   3          BitMapTab[i] = ~NUM1[i] ;
  68   3          }
  69   2          break;
  70   2            //BieMap Show Number-2
  71   2          case 2:
  72   2          for(i=0;i<8;i++)                  
  73   2          {
  74   3          BitMapTab[i] = ~NUM2[i] ;
  75   3          }
  76   2          break;
  77   2            //BieMap Show Number-3
  78   2          case 3:
  79   2          for(i=0;i<8;i++)                  
  80   2          {
  81   3          BitMapTab[i] = ~NUM3[i] ;
  82   3          }
  83   2          break;
  84   2            //BieMap Show Number-4
  85   2          case 4:
  86   2          for(i=0;i<8;i++)                  
  87   2          {
  88   3          BitMapTab[i] = ~NUM4[i] ;
  89   3          }
  90   2          break;
  91   2            //BieMap Show Number-5
  92   2          case 5:
  93   2          for(i=0;i<8;i++)                  
  94   2          {
  95   3          BitMapTab[i] = ~NUM5[i] ;
  96   3          }
  97   2          break;
  98   2            //BieMap Show Number-6
  99   2          case 6:
 100   2          for(i=0;i<8;i++)                  
 101   2          {
 102   3          BitMapTab[i] = ~NUM6[i] ;
 103   3          }
 104   2          break;
 105   2            //BieMap Show Number-7
 106   2          case 7:
 107   2          for(i=0;i<8;i++)                  
 108   2          {
 109   3          BitMapTab[i] = ~NUM7[i] ;
 110   3          }
 111   2          break;
 112   2            //BieMap Show Number-8
 113   2          case 8:
 114   2          for(i=0;i<8;i++)                  
 115   2          {
 116   3          BitMapTab[i] = ~NUM8[i] ;
C51 COMPILER V9.52.0.0   BITMAP                                                            09/27/2021 19:49:08 PAGE 3   

 117   3          }
 118   2          break;
 119   2            //BieMap Show Number-9
 120   2          case 9:
 121   2          for(i=0;i<8;i++)                  
 122   2          {
 123   3          BitMapTab[i] = ~NUM9[i] ;
 124   3          }
 125   2          break;
 126   2          //BieMap-Count reset to 0
 127   2          //case 10:trigger_BM = 0;break;
 128   2          //default:break;
 129   2        }
 130   1      }
 131          
 132          void BitMap_Init()  //推挽输出
 133          {
 134   1        P2M1 &= 0x00;
 135   1        P2M0 |= 0xff;
 136   1        
 137   1        P3M1 &= 0xfb;
 138   1        P3M0 |= 0x04;
 139   1        
 140   1        P4M1 &= 0xfd;
 141   1        P4M0 |= 0x02;
 142   1        
 143   1        P3M1 &= 0xf7;
 144   1        P3M0 |= 0x08;
 145   1        
 146   1        P3M1 &= 0xbf;
 147   1        P3M0 |= 0x40;
 148   1        
 149   1        P4M1 &= 0xef;
 150   1        P4M0 |= 0x10;
 151   1        
 152   1        P3M1 &= 0xef;
 153   1        P3M0 |= 0x10;
 154   1        
 155   1        P4M1 &= 0xfb;
 156   1        P4M0 |= 0x04;
 157   1        
 158   1        P3M1 &= 0xdf;
 159   1        P3M0 |= 0x20;
 160   1        
 161   1        P2 = 0x00;
 162   1        BitMap1 = 0;BitMap2 = 0;BitMap3 = 0;BitMap4 = 0;BitMap5 = 0;BitMap6 = 0;BitMap7 = 0;BitMap8 = 0;
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    684    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
